name: EPUB to Journaling PDF (keep links)

on:
  workflow_dispatch:
    inputs:
      epub_path:
        description: "Path to EPUB in repo (example: bsb 2.epub)"
        required: true
        default: "bsb 2.epub"
      right_margin_in:
        description: "Right journaling margin (inches)"
        required: true
        default: "3.0"
      paper_size:
        description: "letter or a4"
        required: true
        default: "letter"
      base_font_pt:
        description: "Base font size (pt)"
        required: true
        default: "11"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Fixes the libEGL.so.1 error and installs ebook-convert
      - name: Install Calibre and EGL/OpenGL libs
        run: |
          sudo apt-get update
          sudo apt-get install -y calibre libegl1 libopengl0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Python deps
        run: pip install --quiet pymupdf

      - name: Prepare & validate EPUB
        id: prep
        shell: bash
        run: |
          set -e
          mkdir -p work
          EPUB_PATH="${{ inputs.epub_path }}"
          cp "$EPUB_PATH" work/book.epub

          # Validate EPUB is a real ZIP
          python - <<'PY'
import sys, zipfile
try:
    z = zipfile.ZipFile('work/book.epub')
    bad = z.testzip()
    if bad:
        print("Corrupt entry:", bad); sys.exit(1)
    print("EPUB OK")
except Exception as e:
    print("Not a valid EPUB/ZIP:", e); sys.exit(1)
PY

          # Compute right margin in points (72 pt/in)
          RIGHT_PT=$(python - <<'PY'
import sys
print(int(float(sys.argv[1])*72))
PY
          "${{ inputs.right_margin_in }}")
          echo "right_pt=$RIGHT_PT" >> "$GITHUB_OUTPUT"

      - name: Convert EPUB to PDF (preserve links/TOC)
        shell: bash
        run: |
          ebook-convert work/book.epub work/base.pdf \
            --paper-size "${{ inputs.paper_size }}" \
            --margin-left 54 \
            --margin-top 54 \
            --margin-right ${{ steps.prep.outputs.right_pt }} \
            --margin-bottom 54 \
            --pdf-use-document-metadata \
            --embed-all-fonts \
            --pdf-add-toc \
            --base-font-size "${{ inputs.base_font_pt }}"
          ls -lh work/base.pdf

      - name: Add divider + Home hotspot (links stay live)
        shell: bash
        env:
          RIGHT_PT: ${{ steps.prep.outputs.right_pt }}
        run: |
          python - <<'PY'
import os, fitz
in_pdf = "work/base.pdf"
out_pdf = "work/journaling.pdf"
right_pt = int(os.environ["RIGHT_PT"])

doc = fitz.open(in_pdf)
for p in doc:
    r = p.rect
    x = r.x1 - right_pt
    # Divider line near the journaling gutter
    p.draw_line(fitz.Point(x, r.y0+12), fitz.Point(x, r.y1-12), width=0.5, color=(0,0,0))
    # "Home" label + hotspot back to page 1 (index 0)
    p.insert_text(fitz.Point(r.x0+18, r.y0+22), "Home", fontsize=8, color=(0.3,0.3,0.3))
    p.insert_link({
        "kind": fitz.LINK_GOTO,
        "from": fitz.Rect(r.x0+12, r.y0+10, r.x0+75, r.y0+28),
        "page": 0
    })
doc.save(out_pdf)
print("Wrote", out_pdf)
PY
          ls -lh work/journaling.pdf

      - name: Upload finished PDF
        uses: actions/upload-artifact@v4
        with:
          name: journaling-pdf
          path: work/journaling.pdf
          if-no-files-found: error
